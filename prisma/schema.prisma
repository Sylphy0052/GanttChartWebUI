datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Project {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  issues       Issue[]
  dependencies Dependency[]
  calendars    Calendar[]
  activityLogs ActivityLog[]
}

model Issue {
  id            String    @id @default(uuid())
  projectId     String
  parentIssueId String?
  title         String
  description   String    @default("")
  status        String    // todo|doing|blocked|review|done
  type          String    // feature|bug|spike|chore
  priority      Int       // 1..10
  estimateValue Int
  estimateUnit  String    // h|d
  spent         Int       @default(0)
  assigneeId    String?
  startDate     DateTime?
  dueDate       DateTime?
  progress      Int       @default(0)
  labels        String[]
  version       Int       @default(1)
  deletedAt     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  project      Project  @relation(fields: [projectId], references: [id])
  parentIssue  Issue?   @relation("IssueHierarchy", fields: [parentIssueId], references: [id])
  childIssues  Issue[]  @relation("IssueHierarchy")
  
  predecessors Dependency[] @relation("PredecessorIssue")
  successors   Dependency[] @relation("SuccessorIssue")
  activityLogs ActivityLog[]
  
  @@index([projectId, parentIssueId])
  @@index([projectId, updatedAt(sort: Desc)])
  @@index([projectId, dueDate])
  @@index([assigneeId, status])
}

model Dependency {
  id            String   @id @default(uuid())
  projectId     String
  predecessorId String
  successorId   String
  type          String   // FS (MVP)
  lag           Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  project     Project @relation(fields: [projectId], references: [id])
  predecessor Issue   @relation("PredecessorIssue", fields: [predecessorId], references: [id])
  successor   Issue   @relation("SuccessorIssue", fields: [successorId], references: [id])
  
  @@unique([projectId, predecessorId, successorId, type])
  @@index([projectId, predecessorId])
  @@index([projectId, successorId])
}

model Calendar {
  id           String   @id @default(uuid())
  projectId    String
  name         String   @default("Default")
  workingDays  Int[]    // [1,2,3,4,5] for Mon-Fri
  holidays     String[] // ["2025-09-15", "2025-12-25"]
  dailyHours   Int      @default(8)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  project Project @relation(fields: [projectId], references: [id])
  
  @@unique([projectId, name])
}

model ActivityLog {
  id         String   @id @default(uuid())
  projectId  String
  entityType String   // issue|dependency|project|calendar
  entityId   String
  issueId    String?
  action     String   // create|update|delete|move|resize|progress
  actor      String
  before     Json?
  after      Json?
  metadata   Json?
  createdAt  DateTime @default(now())
  
  project Project @relation(fields: [projectId], references: [id])
  issue   Issue?  @relation(fields: [issueId], references: [id])
  
  @@index([projectId, createdAt(sort: Desc)])
  @@index([projectId, entityType, entityId])
  @@index([projectId, actor])
}